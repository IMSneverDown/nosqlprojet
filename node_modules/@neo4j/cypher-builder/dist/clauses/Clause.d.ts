import { CypherASTNode } from "../CypherASTNode";
import type { EnvConfig } from "../Environment";
import { CypherEnvironment } from "../Environment";
import type { CypherResult } from "../types";
declare const customInspectSymbol: unique symbol;
/** Config fields for the .build method */
export type BuildConfig = Partial<EnvConfig>;
/** Represents a clause AST node
 *  @group Internal
 */
export declare abstract class Clause extends CypherASTNode {
    protected nextClause: Clause | undefined;
    /** Compiles a clause into Cypher and params */
    build({ prefix, extraParams, labelOperator, }?: {
        prefix?: string;
        extraParams?: Record<string, unknown>;
        labelOperator?: ":" | "&";
    }): CypherResult;
    private getEnv;
    /** Custom string for browsers and templating
     * @hidden
     */
    toString(): string;
    /** Custom log for console.log in Node
     * @hidden
     */
    [customInspectSymbol](): string;
    protected addNextClause(clause: Clause): void;
    protected compileNextClause(env: CypherEnvironment): string;
}
export {};
